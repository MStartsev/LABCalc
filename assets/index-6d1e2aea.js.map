{"version":3,"file":"index-6d1e2aea.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/components/PitCard/PitCard.jsx","../../src/components/Calculator/Calculator.jsx","../../src/components/EditModal/EditModal.jsx","../../src/components/SelectMode/SelectMode.jsx","../../src/hooks/useApi.js","../../src/utils/calculations.js","../../src/utils/constants.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import styles from \"./PitCard.module.css\";\n\nconst PitCard = ({ pit, isSelected, onSelect, onEdit, mode = \"view\" }) => {\n  const getPitColor = () => {\n    if (!pit.W || !pit.Kл || pit.силос === null) return \"var(--color-empty)\";\n\n    if (pit.силос === 1) return \"var(--color-silo-1)\";\n    if (pit.силос === 2) return \"var(--color-silo-2)\";\n    if (pit.силос === 3) {\n      return parseFloat(pit.Kл) > 23\n        ? \"var(--color-silo-3-high)\"\n        : \"var(--color-silo-3-low)\";\n    }\n    return \"var(--color-empty)\";\n  };\n\n  const formatValue = (value, unit = \"\") => {\n    if (value === null || value === undefined || value === \"\") return \"-\";\n    return `${value}${unit}`;\n  };\n\n  const handleClick = () => {\n    if (mode === \"select\") {\n      // В режимі редагування можна клікнути на будь-яку яму\n      onEdit(pit);\n    } else if (mode === \"view\") {\n      // В режимі перегляду можна вибрати тільки заповнені ями\n      if (pit.W && pit.Kл && pit.силос !== null) {\n        onSelect(pit);\n      }\n    }\n  };\n\n  const handleCheckboxChange = (e) => {\n    e.stopPropagation();\n    // Checkbox тільки для заповнених ям\n    if (pit.W && pit.Kл && pit.силос !== null) {\n      onSelect(pit);\n    }\n  };\n\n  return (\n    <div\n      className={`${styles.pitCard} ${isSelected ? styles.selected : \"\"} ${\n        !pit.W || !pit.Kл || pit.силос === null ? styles.empty : \"\"\n      }`}\n      style={{ backgroundColor: getPitColor() }}\n      onClick={handleClick}\n    >\n      <div className={styles.pitHeader}>\n        <span className={styles.pitNumber}>{pit.id}</span>\n        <span className={styles.pitDate}>{pit.дата}</span>\n        {mode === \"view\" && (\n          <input\n            type=\"checkbox\"\n            checked={isSelected}\n            onChange={handleCheckboxChange}\n            disabled={!pit.W || !pit.Kл || pit.силос === null}\n            className={styles.checkbox}\n          />\n        )}\n      </div>\n\n      <div className={styles.pitContent}>\n        <div className={styles.pitRow}>W = {formatValue(pit.W, \"%\")}</div>\n        <div className={styles.pitRow}>ЧП = {formatValue(pit.ЧП, \"с\")}</div>\n        <div className={styles.pitRow}>\n          Kл = {formatValue(pit.Kл, \"%\")} - {formatValue(pit.ВДК, \"од.\")}\n        </div>\n        <div className={styles.pitRow}>m = {formatValue(pit.m, \"т\")}</div>\n      </div>\n\n      {pit.силос && <div className={styles.pitCorner}>{pit.силос}с</div>}\n    </div>\n  );\n};\n\nexport default PitCard;\n","import React, { useState, useEffect } from \"react\";\nimport PitCard from \"../PitCard/PitCard\";\nimport styles from \"./Calculator.module.css\";\n\nconst Calculator = ({ selectedPits, onBack, allPits, onPitSelect }) => {\n  // Основні стани компонента\n  const [targetGluten, setTargetGluten] = useState(null); // Цільова клейковина\n  const [percentages, setPercentages] = useState({}); // Відсотки ям {id: percentage}\n  const [mixData, setMixData] = useState({}); // Дані результуючої суміші\n  const [isAutoMode, setIsAutoMode] = useState(true); // true = автоматичний, false = ручний режим\n  const [savedTargetGluten, setSavedTargetGluten] = useState(null); // Збережена цільова клейковина\n\n  // Стани для фільтрів та опцій відображення\n  const [componentFilter, setComponentFilter] = useState(\"best\"); // Фільтр по кількості компонентів\n  const [showTopResults, setShowTopResults] = useState(false); // Показувати топ 5 чи найкращий\n  const [topResults, setTopResults] = useState([]); // Масив топ результатів\n\n  useEffect(() => {\n    const savedGluten = localStorage.getItem(\"labcalc_target_gluten\");\n    if (savedGluten) {\n      const value = parseFloat(savedGluten);\n      if (!isNaN(value)) {\n        setSavedTargetGluten(value);\n      }\n    }\n  }, []);\n\n  // Ефект що спрацьовує при зміні вибраних ям або режиму\n  useEffect(() => {\n    if (selectedPits.length === 1) {\n      // Одна яма - завжди 100%\n      setPercentages({ [selectedPits[0].id]: 100 });\n      setMixData(selectedPits[0]);\n      setTargetGluten(parseFloat(selectedPits[0].Kл));\n      setTopResults([]);\n    } else if (selectedPits.length >= 2) {\n      if (selectedPits.length === 0 && savedTargetGluten && !targetGluten) {\n        setTargetGluten(savedTargetGluten);\n      }\n      if (isAutoMode) {\n        initializeAutoMode();\n      } else {\n        initializeManualMode();\n      }\n    }\n  }, [selectedPits, isAutoMode, componentFilter, savedTargetGluten]);\n\n  // Ініціалізація автоматичного режиму\n  const initializeAutoMode = () => {\n    const glutenValues = selectedPits\n      .map((pit) => parseFloat(pit.Kл))\n      .filter((v) => !isNaN(v));\n\n    const minGluten = Math.min(...glutenValues);\n    const maxGluten = Math.max(...glutenValues);\n\n    // Використовуємо збережене значення клейковини або середнє арифметичне\n    const targetValue =\n      savedTargetGluten ||\n      (glutenValues.length > 0 ? (minGluten + maxGluten) / 2 : 22.0);\n\n    setTargetGluten(Math.round(targetValue * 10) / 10);\n\n    // Запускаємо оптимізацію\n    const results = optimizeForTargetGluten(targetValue, selectedPits);\n\n    if (\n      showTopResults &&\n      results.alternatives &&\n      results.alternatives.length > 0\n    ) {\n      // Режим топ 5 - зберігаємо всі варіанти\n      setTopResults(results.alternatives);\n      setPercentages(results.alternatives[0].percentages);\n      setMixData(results.alternatives[0].mixData);\n    } else {\n      // Режим найкращого - показуємо тільки один варіант\n      setPercentages(results.percentages || results);\n      calculateMixFromPercentages(results.percentages || results);\n      setTopResults([]);\n    }\n  };\n\n  // Ініціалізація ручного режиму\n  const initializeManualMode = () => {\n    // Рівномірний розподіл для початкового стану\n    const initialPercentages = {};\n    const equalShare = Math.floor(100 / selectedPits.length / 10) * 10;\n    let remaining = 100;\n\n    selectedPits.forEach((pit, index) => {\n      if (index === selectedPits.length - 1) {\n        // Остання яма отримує залишок\n        initialPercentages[pit.id] = Math.max(0, remaining);\n      } else {\n        const share = Math.max(0, equalShare);\n        initialPercentages[pit.id] = share;\n        remaining -= share;\n      }\n    });\n\n    setPercentages(initialPercentages);\n    calculateMixFromPercentages(initialPercentages);\n    updateTargetFromPercentages(initialPercentages);\n  };\n\n  // Основна функція оптимізації суміші\n  const optimizeForTargetGluten = (targetGluten, pits) => {\n    if (pits.length < 2) return {};\n\n    const TARGET_FALLING_NUMBER = 350; // Цільове число падіння\n\n    // Для 2 ям - математично точне рішення\n    if (pits.length === 2) {\n      const [pit1, pit2] = pits;\n      const g1 = parseFloat(pit1.Kл);\n      const g2 = parseFloat(pit2.Kл);\n\n      if (Math.abs(g1 - g2) < 0.01) {\n        // Однакова клейковина - 50/50\n        return { [pit1.id]: 50, [pit2.id]: 50 };\n      }\n\n      // Формула для 2 компонентів: p1 = (target - g2) / (g1 - g2)\n      const p1 = ((targetGluten - g2) / (g1 - g2)) * 100;\n      const p2 = 100 - p1;\n\n      return {\n        [pit1.id]: Math.max(0, Math.min(100, Math.round(p1 / 10) * 10)),\n        [pit2.id]: Math.max(0, Math.min(100, Math.round(p2 / 10) * 10)),\n      };\n    }\n\n    // Для 3+ ям - повний перебір з фільтрацією\n    console.log(\n      `Оптимізація для цільової клейковини: ${targetGluten}%, цільове число падіння: ${TARGET_FALLING_NUMBER}с`\n    );\n    console.log(`Фільтр компонентів: ${componentFilter}`);\n    console.log(\n      \"Ями:\",\n      pits.map((p) => `${p.id}(Kл:${p.Kл}%, ЧП:${p.ЧП}с)`)\n    );\n\n    let bestCombinations = [];\n    let bestGlutenError = Infinity;\n\n    // Функція для підрахунку кількості активних компонентів\n    const getComponentCount = (percentages) => {\n      return Object.values(percentages).filter((p) => p > 0).length;\n    };\n\n    // Функція фільтрації по кількості компонентів\n    const passesComponentFilter = (percentages) => {\n      const componentCount = getComponentCount(percentages);\n\n      switch (componentFilter) {\n        case \"2-comp\":\n          return componentCount === 2;\n        case \"3-comp\":\n          return componentCount === 3;\n        case \"multi-comp\":\n          return componentCount >= 4;\n        case \"best\":\n        default:\n          return true; // Без фільтра\n      }\n    };\n\n    // Рекурсивна функція для генерації всіх можливих комбінацій\n    const generateAllCombinations = (\n      pitIndex,\n      currentPercentages,\n      remainingPerc\n    ) => {\n      if (pitIndex >= pits.length) {\n        // Перевіряємо фінальну комбінацію\n        if (remainingPerc === 0) {\n          // Застосовуємо фільтр компонентів\n          if (!passesComponentFilter(currentPercentages)) return;\n\n          // Мінімум 2 ями повинні брати участь\n          const nonZeroCount = getComponentCount(currentPercentages);\n          if (nonZeroCount < 2) return;\n\n          // Обчислюємо характеристики суміші\n          let mixW = 0,\n            mixЧП = 0,\n            mixGluten = 0,\n            mixВДК = 0,\n            mixM = Infinity;\n          let totalWeight = 0;\n\n          pits.forEach((pit) => {\n            const perc = currentPercentages[pit.id];\n            if (perc > 0) {\n              const weight = perc / 100;\n              mixW += parseFloat(pit.W || 0) * weight;\n              mixЧП += parseFloat(pit.ЧП || 0) * weight;\n              mixGluten += parseFloat(pit.Kл || 0) * weight;\n              mixВДК += parseFloat(pit.ВДК || 0) * weight;\n\n              // Обчислюємо максимальну масу суміші (обмежена найменшою ямою)\n              const maxFromPit = parseFloat(pit.m || 0) / weight;\n              if (maxFromPit > 0) {\n                mixM = Math.min(mixM, maxFromPit);\n              }\n\n              totalWeight += weight;\n            }\n          });\n\n          if (totalWeight === 0) return;\n\n          // Нормалізуємо до зваженого середнього\n          mixW = mixW / totalWeight;\n          mixЧП = mixЧП / totalWeight;\n          mixGluten = mixGluten / totalWeight;\n          mixВДК = mixВДК / totalWeight;\n\n          // Обчислюємо помилки\n          const glutenError = Math.abs(mixGluten - targetGluten);\n          const fallingNumberError = Math.abs(mixЧП - TARGET_FALLING_NUMBER);\n\n          // Формуємо об'єкт даних суміші\n          const mixDataObj = {\n            W: Math.round(mixW * 10) / 10,\n            ЧП: Math.round(mixЧП),\n            Kл: Math.round(mixGluten * 10) / 10,\n            ВДК: Math.round(mixВДК),\n            m: mixM === Infinity ? 0 : Math.round(mixM * 10) / 10,\n          };\n\n          // Якщо помилка клейковини краща - починаємо новий список\n          if (glutenError < bestGlutenError - 0.049) {\n            bestGlutenError = glutenError;\n            bestCombinations = [\n              {\n                percentages: { ...currentPercentages },\n                glutenError: glutenError,\n                fallingNumberError: fallingNumberError,\n                mixGluten: mixGluten,\n                mixFallingNumber: mixЧП,\n                mixData: mixDataObj,\n                componentCount: nonZeroCount,\n              },\n            ];\n          }\n          // Якщо помилка клейковини приблизно така ж - додаємо до списку\n          else if (Math.abs(glutenError - bestGlutenError) <= 0.049) {\n            bestCombinations.push({\n              percentages: { ...currentPercentages },\n              glutenError: glutenError,\n              fallingNumberError: fallingNumberError,\n              mixGluten: mixGluten,\n              mixFallingNumber: mixЧП,\n              mixData: mixDataObj,\n              componentCount: nonZeroCount,\n            });\n          }\n        }\n        return;\n      }\n\n      const currentPit = pits[pitIndex];\n\n      // Для поточної ями пробуємо всі можливі відсотки від 0 до 100 з кроком 10\n      for (let perc = 0; perc <= Math.min(100, remainingPerc); perc += 10) {\n        currentPercentages[currentPit.id] = perc;\n        generateAllCombinations(\n          pitIndex + 1,\n          currentPercentages,\n          remainingPerc - perc\n        );\n      }\n    };\n\n    // Запускаємо повний перебір\n    console.log(\"Початок повного перебору комбінацій...\");\n    const startTime = Date.now();\n    generateAllCombinations(0, {}, 100);\n    const endTime = Date.now();\n    console.log(`Перебір завершено за ${endTime - startTime}мс`);\n\n    // Обробляємо результати\n    if (bestCombinations.length === 0) {\n      console.log(\n        \"Не знайдено валідних комбінацій, використовуємо запасний варіант\"\n      );\n      return {\n        percentages: pits.reduce((acc, pit, index) => {\n          acc[pit.id] = index === 0 ? 100 : 0;\n          return acc;\n        }, {}),\n      };\n    }\n\n    // Сортуємо по помилці числа падіння\n    bestCombinations.sort(\n      (a, b) => a.fallingNumberError - b.fallingNumberError\n    );\n\n    console.log(\n      `Знайдено ${\n        bestCombinations.length\n      } комбінацій з помилкою клейковини ≤ ${bestGlutenError.toFixed(3)}`\n    );\n\n    // Якщо потрібно показати топ результати\n    if (showTopResults) {\n      const top5 = bestCombinations.slice(0, 5);\n      console.log(\"Топ 5 результатів:\");\n      top5.forEach((combo, index) => {\n        console.log(\n          `${index + 1}. ${\n            combo.componentCount\n          }-комп: Kл:${combo.mixGluten.toFixed(\n            1\n          )}% ЧП:${combo.mixFallingNumber.toFixed(0)}с W:${\n            combo.mixData.W\n          }% m:${combo.mixData.m}т`\n        );\n        console.log(`   Відсотки: ${JSON.stringify(combo.percentages)}`);\n      });\n\n      return {\n        percentages: top5[0].percentages,\n        alternatives: top5,\n      };\n    } else {\n      const bestCombo = bestCombinations[0];\n      console.log(\"Обрана найкраща комбінація:\");\n      console.log(`  ${bestCombo.componentCount}-компонентна суміш`);\n      console.log(\n        `  Клейковина: ${bestCombo.mixGluten.toFixed(\n          1\n        )}% (помилка: ${bestCombo.glutenError.toFixed(3)})`\n      );\n      console.log(\n        `  Число падіння: ${bestCombo.mixFallingNumber.toFixed(\n          0\n        )}с (помилка: ${bestCombo.fallingNumberError.toFixed(1)})`\n      );\n      console.log(`  Повні дані суміші:`, bestCombo.mixData);\n      console.log(`  Відсотки:`, bestCombo.percentages);\n\n      return {\n        percentages: bestCombo.percentages,\n      };\n    }\n  };\n\n  // Розрахунок характеристик суміші з відсотків\n  const calculateMixFromPercentages = (percs) => {\n    const totalPerc = Object.values(percs).reduce(\n      (sum, p) => sum + (p || 0),\n      0\n    );\n    if (totalPerc === 0) return;\n\n    let mixW = 0,\n      mixЧП = 0,\n      mixKл = 0,\n      mixВДК = 0,\n      maxMass = Infinity;\n\n    selectedPits.forEach((pit) => {\n      const perc = percs[pit.id] || 0;\n      if (perc > 0) {\n        const factor = perc / 100;\n        mixW += parseFloat(pit.W || 0) * factor;\n        mixЧП += parseFloat(pit.ЧП || 0) * factor;\n        mixKл += parseFloat(pit.Kл || 0) * factor;\n        mixВДК += parseFloat(pit.ВДК || 0) * factor;\n\n        const maxFromPit = parseFloat(pit.m || 0) / factor;\n        if (maxFromPit > 0) {\n          maxMass = Math.min(maxMass, maxFromPit);\n        }\n      }\n    });\n\n    setMixData({\n      W: Math.round(mixW * 10) / 10,\n      ЧП: Math.round(mixЧП),\n      Kл: Math.round(mixKл * 10) / 10,\n      ВДК: Math.round(mixВДК),\n      m: maxMass === Infinity ? 0 : Math.round(maxMass * 10) / 10,\n    });\n  };\n\n  // Оновлення цільової клейковини з поточних відсотків (для ручного режиму)\n  const updateTargetFromPercentages = (percs) => {\n    let mixGluten = 0;\n    let totalPerc = 0;\n\n    selectedPits.forEach((pit) => {\n      const perc = percs[pit.id] || 0;\n      if (perc > 0) {\n        mixGluten += parseFloat(pit.Kл || 0) * (perc / 100);\n        totalPerc += perc / 100;\n      }\n    });\n\n    if (totalPerc > 0) {\n      const calculatedGluten = mixGluten / totalPerc;\n      setTargetGluten(Math.round(calculatedGluten * 10) / 10);\n    }\n  };\n\n  // Зміна цільової клейковини (автоматичний режим)\n  const adjustGluten = (delta) => {\n    if (selectedPits.length < 2) return;\n\n    const glutenValues = selectedPits.map((pit) => parseFloat(pit.Kл));\n    const minGluten = Math.min(...glutenValues);\n    const maxGluten = Math.max(...glutenValues);\n\n    const newTarget = targetGluten + delta;\n    const roundedTarget = Math.round(newTarget * 10) / 10;\n\n    setTargetGluten(roundedTarget);\n    setSavedTargetGluten(roundedTarget); // Зберігаємо локально\n    localStorage.setItem(\"labcalc_target_gluten\", roundedTarget.toString());\n\n    // Автоматично перераховуємо відсотки під нову ціль\n    const results = optimizeForTargetGluten(roundedTarget, selectedPits);\n\n    if (\n      showTopResults &&\n      results.alternatives &&\n      results.alternatives.length > 0\n    ) {\n      setTopResults(results.alternatives);\n      setPercentages(results.alternatives[0].percentages);\n      setMixData(results.alternatives[0].mixData);\n    } else {\n      setPercentages(results.percentages || results);\n      calculateMixFromPercentages(results.percentages || results);\n    }\n  };\n\n  // Зміна відсотка ями (ручний режим)\n  const adjustPercentageManual = (pitId, delta) => {\n    const newPercentages = { ...percentages };\n    const currentPerc = newPercentages[pitId] || 0;\n\n    // Кратність 10%, діапазон 0-100%\n    let newPerc = currentPerc + delta;\n    newPerc = Math.max(0, Math.min(100, Math.round(newPerc / 10) * 10));\n\n    newPercentages[pitId] = newPerc;\n\n    setPercentages(newPercentages);\n    calculateMixFromPercentages(newPercentages);\n    updateTargetFromPercentages(newPercentages);\n  };\n\n  // Перемикання між автоматичним та ручним режимами\n  const toggleMode = () => {\n    setIsAutoMode(!isAutoMode);\n  };\n\n  // Функції для перевірки меж (автоматичний режим)\n  const canDecreaseGluten = () => {\n    return isAutoMode && selectedPits.length >= 2;\n  };\n\n  const canIncreaseGluten = () => {\n    return isAutoMode && selectedPits.length >= 2;\n  };\n\n  // Функції для перевірки меж (ручний режим)\n  const canDecreasePit = (pitId) => {\n    return !isAutoMode && (percentages[pitId] || 0) > 0;\n  };\n\n  const canIncreasePit = (pitId) => {\n    return !isAutoMode && (percentages[pitId] || 0) < 100;\n  };\n\n  // Перевірка на перевищення 100% в ручному режимі\n  const getTotalPercentage = () => {\n    return Object.values(percentages).reduce((sum, p) => sum + (p || 0), 0);\n  };\n\n  const isOverLimit = () => {\n    return (\n      (!isAutoMode && getTotalPercentage() > 100) ||\n      (!isAutoMode && getTotalPercentage() < 100)\n    );\n  };\n\n  // Перевірка відхилення клейковини в автоматичному режимі\n  const getGlutenError = () => {\n    if (!mixData.Kл || !targetGluten) return 0;\n    return Math.abs(mixData.Kл - targetGluten);\n  };\n\n  const isGlutenErrorHigh = () => {\n    return isAutoMode && getGlutenError() > 0.5;\n  };\n\n  // Основні змінні для перевірки можливостей\n  const canAdjustGluten = selectedPits.length >= 2 && isAutoMode;\n  const canAdjustPercentages = selectedPits.length >= 2 && !isAutoMode;\n\n  return (\n    <div className={styles.calculator}>\n      {/* Заголовок з кнопками навігації */}\n      <div className={styles.header}>\n        <button onClick={onBack} className={styles.backBtn}>\n          ←\n        </button>\n        <h2>LAB Calc</h2>\n        <button onClick={toggleMode} className={styles.modeBtn}>\n          {isAutoMode ? \"🤖\" : \"✋\"}\n        </button>\n      </div>\n\n      {/* Темна табличка керування */}\n      <div className={styles.controlTable}>\n        {/* Рядок клейковини */}\n        <div className={styles.glutenRow}>\n          <span className={styles.glutenLabel}>Кл</span>\n          {isAutoMode ? (\n            <>\n              <button\n                onClick={() => adjustGluten(-0.1)}\n                className={styles.controlBtn}\n                disabled={!canDecreaseGluten()}\n              >\n                -\n              </button>\n              <span\n                className={`${styles.glutenValue} ${\n                  isGlutenErrorHigh() ? styles.errorValue : \"\"\n                }`}\n              >\n                {targetGluten?.toFixed(1) || \"0.0\"}%\n              </span>\n              <button\n                onClick={() => adjustGluten(0.1)}\n                className={styles.controlBtn}\n                disabled={!canIncreaseGluten()}\n              >\n                +\n              </button>\n            </>\n          ) : (\n            <>\n              <span className={styles.disabledBtn}>-</span>\n              <span className={styles.glutenValue}>\n                {targetGluten?.toFixed(1) || \"0.0\"}%\n              </span>\n              <span className={styles.disabledBtn}>+</span>\n            </>\n          )}\n          <div className={styles.modeLabel}>\n            {isAutoMode ? \"АВТО\" : \"РУЧН\"}\n            {!isAutoMode && isOverLimit() && (\n              <div className={styles.totalPercentage}>\n                {getTotalPercentage()}%\n              </div>\n            )}\n          </div>\n\n          {/* Результат суміші справа */}\n          {/* {selectedPits.length > 1 && (\n            <div className={styles.mixResult}>\n              W = {mixData.W || 0}%<br />\n              ЧП = {mixData.ЧП || 0}с<br />\n              Kл = {mixData.Kл || 0}% - {mixData.ВДК || 0}од.\n              <br />m = {mixData.m || 0}т\n            </div>\n          )} */}\n        </div>\n\n        <div className={styles.mixInfo}>\n          <div className={styles.mixGrid}>\n            <div className={styles.mixItem}>\n              <span className={styles.mixLabel}>W:</span>\n              <span className={styles.mixValue}>{mixData.W || 0}%</span>\n            </div>\n            <div className={styles.mixItem}>\n              <span className={styles.mixLabel}>ЧП:</span>\n              <span className={styles.mixValue}>{mixData.ЧП || 0}с</span>\n            </div>\n            <div className={styles.mixItem}>\n              <span className={styles.mixLabel}>Kл:</span>\n              <span className={styles.mixValue}>{mixData.Kл || 0}%</span>\n            </div>\n            <div className={styles.mixItem}>\n              <span className={styles.mixLabel}>ВДК:</span>\n              <span className={styles.mixValue}>{mixData.ВДК || 0}од.</span>\n            </div>\n            <div className={styles.mixItem}>\n              <span className={styles.mixLabel}>m:</span>\n              <span className={styles.mixValue}>{mixData.m || 0}т</span>\n            </div>\n          </div>\n        </div>\n        {/* Фільтри для автоматичного режиму */}\n        {isAutoMode && selectedPits.length > 2 && (\n          <div className={styles.filtersRow}>\n            <div className={styles.componentFilter}>\n              <label>Компоненти:</label>\n              <select\n                value={componentFilter}\n                onChange={(e) => setComponentFilter(e.target.value)}\n                className={styles.filterSelect}\n              >\n                <option value=\"best\">Найкращий</option>\n                <option value=\"2-comp\">2-компонентні</option>\n                <option value=\"3-comp\">3-компонентні</option>\n                {selectedPits.length > 3 && (\n                  <option value=\"multi-comp\">Багато-компонентні</option>\n                )}\n              </select>\n            </div>\n\n            <div className={styles.resultsFilter}>\n              <label>Показати:</label>\n              <select\n                value={showTopResults ? \"top5\" : \"best\"}\n                onChange={(e) => setShowTopResults(e.target.value === \"top5\")}\n                className={styles.filterSelect}\n              >\n                <option value=\"best\">Найкращий варіант</option>\n                <option value=\"top5\">Топ 5 варіантів</option>\n              </select>\n            </div>\n          </div>\n        )}\n        {/* Рядки для кожної вибраної ями */}\n        {selectedPits\n          .filter((pit) => (percentages[pit.id] || 0) > 0)\n          .map((pit) => (\n            <div key={pit.id} className={styles.pitControlRow}>\n              <span className={styles.pitId}>{pit.id}</span>\n              {selectedPits.length === 1 ? (\n                <span className={styles.percentageFixed}>100%</span>\n              ) : isAutoMode ? (\n                // Автоматичний режим - тільки відображення відсотків\n                <span className={styles.percentageFixed}>\n                  {percentages[pit.id] || 0}%\n                </span>\n              ) : (\n                // Ручний режим - кнопки керування\n                <>\n                  <button\n                    onClick={() => adjustPercentageManual(pit.id, -10)}\n                    className={styles.controlBtn}\n                    disabled={!canDecreasePit(pit.id)}\n                  >\n                    -\n                  </button>\n                  <span\n                    className={`${styles.percentageValue} ${\n                      isOverLimit() ? styles.errorValue : \"\"\n                    }`}\n                  >\n                    {percentages[pit.id] || 0}%\n                  </span>\n                  <button\n                    onClick={() => adjustPercentageManual(pit.id, 10)}\n                    className={styles.controlBtn}\n                    disabled={!canIncreasePit(pit.id)}\n                  >\n                    +\n                  </button>\n                </>\n              )}\n            </div>\n          ))}\n      </div>\n\n      {/* Топ 5 результатів */}\n      {isAutoMode && showTopResults && topResults.length > 0 && (\n        <div className={styles.topResultsContainer}>\n          <h3 className={styles.topResultsTitle}>\n            Топ {topResults.length} варіантів:\n          </h3>\n          {topResults.map((result, index) => (\n            <div\n              key={index}\n              className={`${styles.topResultItem} ${\n                index === 0 ? styles.selectedResult : \"\"\n              }`}\n              onClick={() => {\n                setPercentages(result.percentages);\n                setMixData(result.mixData);\n              }}\n            >\n              <div className={styles.resultHeader}>\n                <span className={styles.resultNumber}>#{index + 1}</span>\n                <span className={styles.componentCount}>\n                  {result.componentCount}-комп\n                </span>\n              </div>\n              <div className={styles.resultData}>\n                <div className={styles.resultMix}>\n                  W = {result.mixData.W}% | ЧП = {result.mixData.ЧП}с | Kл ={\" \"}\n                  {result.mixData.Kл}% | m = {result.mixData.m}т\n                </div>\n                <div className={styles.resultPercentages}>\n                  {Object.entries(result.percentages)\n                    .filter(([_, perc]) => perc > 0)\n                    .map(([pitId, perc]) => `${pitId}:${perc}%`)\n                    .join(\", \")}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Блок результату суміші (тільки для 1 ями) */}\n\n      {/* <div className={styles.mixDisplay}>\n        <div className={styles.mixInfo}>\n          <div>W = {mixData.W || 0}%</div>\n          <div>ЧП = {mixData.ЧП || 0}с</div>\n          <div>\n            Kл = {mixData.Kл || 0}% - {mixData.ВДК || 0}од.\n          </div>\n          <div>m = {mixData.m || 0}т</div>\n        </div>\n      </div> */}\n\n      {/* Сітка всіх ям */}\n      <div className={styles.pitsGrid}>\n        {allPits.map((pit) => {\n          const isSelected = selectedPits.some((p) => p.id === pit.id);\n\n          return (\n            <div key={pit.id} className={styles.pitContainer}>\n              <PitCard\n                pit={pit}\n                isSelected={isSelected}\n                onSelect={onPitSelect}\n                mode=\"view\"\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./EditModal.module.css\";\n\nconst EditModal = ({ pit, isOpen, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    силос: 2,\n    W: 15.6,\n    ЧП: 360,\n    Kл: 22.0,\n    ВДК: 80,\n    m: 10.0,\n    дата: new Date().toLocaleDateString(\"uk-UA\"),\n  });\n\n  useEffect(() => {\n    if (pit && isOpen) {\n      setFormData({\n        силос: pit.силос || 2,\n        W: pit.W || 15.6,\n        ЧП: pit.ЧП || 360,\n        Kл: pit.Kл || 22.0,\n        ВДК: pit.ВДК || 80,\n        m: pit.m || 10.0,\n        дата: pit.дата || new Date().toLocaleDateString(\"uk-UA\"),\n      });\n    }\n  }, [pit, isOpen]);\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleSave = () => {\n    const updatedPit = {\n      ...pit,\n      ...formData,\n    };\n    onSave(updatedPit);\n    onClose();\n  };\n\n  const handleClear = () => {\n    const clearedPit = {\n      ...pit,\n      силос: null,\n      W: null,\n      ЧП: null,\n      Kл: null,\n      ВДК: null,\n      m: null,\n    };\n    onSave(clearedPit);\n    onClose();\n  };\n\n  if (!isOpen || !pit) return null;\n\n  return (\n    <div className={styles.modalOverlay} onClick={onClose}>\n      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>\n        <div className={styles.modalHeader}>\n          <button onClick={onClose} className={styles.backBtn}>\n            ←\n          </button>\n          <h3>{pit.id}</h3>\n          <div></div>\n        </div>\n\n        <div className={styles.formFields}>\n          <div className={styles.field}>\n            <label>Силос</label>\n            <select\n              value={formData.силос || 2}\n              onChange={(e) =>\n                handleInputChange(\"силос\", parseInt(e.target.value))\n              }\n              className={styles.select}\n            >\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n            </select>\n          </div>\n\n          <div className={styles.field}>\n            <label>W</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              value={formData.W || \"\"}\n              onChange={(e) =>\n                handleInputChange(\"W\", parseFloat(e.target.value) || null)\n              }\n              className={styles.input}\n            />\n          </div>\n\n          <div className={styles.field}>\n            <label>ЧП</label>\n            <input\n              type=\"number\"\n              step=\"1\"\n              value={formData.ЧП || \"\"}\n              onChange={(e) =>\n                handleInputChange(\"ЧП\", parseInt(e.target.value) || null)\n              }\n              className={styles.input}\n            />\n          </div>\n\n          <div className={styles.field}>\n            <label>Kл</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              value={formData.Kл || \"\"}\n              onChange={(e) =>\n                handleInputChange(\"Kл\", parseFloat(e.target.value) || null)\n              }\n              className={styles.input}\n            />\n          </div>\n\n          <div className={styles.field}>\n            <label>ВДК</label>\n            <input\n              type=\"number\"\n              step=\"1\"\n              value={formData.ВДК || \"\"}\n              onChange={(e) =>\n                handleInputChange(\"ВДК\", parseInt(e.target.value) || null)\n              }\n              className={styles.input}\n            />\n          </div>\n\n          <div className={styles.field}>\n            <label>m</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              value={formData.m || \"\"}\n              onChange={(e) =>\n                handleInputChange(\"m\", parseFloat(e.target.value) || null)\n              }\n              className={styles.input}\n            />\n          </div>\n\n          <div className={styles.field}>\n            <label>дата</label>\n            <input\n              type=\"text\"\n              value={formData.дата || \"\"}\n              onChange={(e) => handleInputChange(\"дата\", e.target.value)}\n              className={styles.input}\n            />\n          </div>\n        </div>\n\n        <div className={styles.modalActions}>\n          <button onClick={handleClear} className={styles.clearBtn}>\n            Очистити\n          </button>\n          <button onClick={handleSave} className={styles.saveBtn}>\n            Зберегти\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditModal;\n","import React, { useState } from \"react\";\nimport PitCard from \"../PitCard/PitCard\";\nimport EditModal from \"../EditModal/EditModal\";\nimport styles from \"./SelectMode.module.css\";\n\nconst SelectMode = ({ pits, onBack, onSave }) => {\n  const [editingPit, setEditingPit] = useState(null);\n  const [localPits, setLocalPits] = useState(pits);\n\n  const handleSavePit = async (updatedPit) => {\n    const newPits = localPits.map((p) =>\n      p.id === updatedPit.id ? updatedPit : p\n    );\n\n    setLocalPits(newPits);\n\n    // Передаємо всі ями (включно з порожніми) для локального стану\n    // але в onSave буде фільтрація для бекенду\n    await onSave(newPits);\n  };\n\n  const handleEditPit = (pit) => {\n    setEditingPit(pit);\n  };\n\n  const handleCloseModal = () => {\n    setEditingPit(null);\n  };\n\n  return (\n    <div className={styles.selectMode}>\n      <div className={styles.header}>\n        <button onClick={onBack} className={styles.backBtn}>\n          ←\n        </button>\n        <h2>Внести зміни</h2>\n        <div></div>\n      </div>\n\n      <div className={styles.pitsGrid}>\n        {localPits.map((pit) => (\n          <PitCard\n            key={pit.id}\n            pit={pit}\n            isSelected={false}\n            onSelect={() => {}}\n            onEdit={handleEditPit}\n            mode=\"select\"\n          />\n        ))}\n      </div>\n\n      <EditModal\n        pit={editingPit}\n        isOpen={!!editingPit}\n        onClose={handleCloseModal}\n        onSave={handleSavePit}\n      />\n    </div>\n  );\n};\n\nexport default SelectMode;\n","import { useState, useCallback } from \"react\";\n\nconst API_URL =\n  \"https://script.google.com/macros/s/AKfycbyb3E1Nuc9giNSY0zuhu7hcPYGWILYoO7X8X0DWG9DTASEzfIWmKM4JxS4FwzdyGwKS/exec\";\n\nexport const useApi = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Використовуємо GET запит для завантаження даних\n      const response = await fetch(API_URL, {\n        method: \"GET\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      return data;\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Помилка завантаження даних:\", err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const saveData = useCallback(async (data) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const payload = {\n        ...data,\n        last: new Date().toISOString(),\n        modified: new Date().toISOString(),\n      };\n\n      // Використовуємо GET запит з параметром data\n      const params = new URLSearchParams({\n        data: JSON.stringify(payload),\n      });\n\n      const response = await fetch(`${API_URL}?${params}`, {\n        method: \"GET\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (result.error) {\n        throw new Error(result.error);\n      }\n\n      return result;\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Помилка збереження даних:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Альтернативний метод через JSONP (якщо потрібно)\n  const loadDataJSONP = useCallback(() => {\n    return new Promise((resolve, reject) => {\n      const callbackName = \"apiCallback_\" + Date.now();\n      const script = document.createElement(\"script\");\n\n      // Глобальна функція для обробки відповіді\n      window[callbackName] = function (data) {\n        resolve(data);\n        delete window[callbackName];\n        document.head.removeChild(script);\n      };\n\n      script.onerror = function () {\n        reject(new Error(\"JSONP request failed\"));\n        delete window[callbackName];\n        document.head.removeChild(script);\n      };\n\n      script.src = `${API_URL}?callback=${callbackName}`;\n      document.head.appendChild(script);\n    });\n  }, []);\n\n  return {\n    loading,\n    error,\n    loadData,\n    saveData,\n    loadDataJSONP,\n  };\n};\n","/**\n * Розрахунок суміші на основі вибраних ям та відсотків\n */\nexport const calculateMixture = (selectedPits, percentages) => {\n  const totalPerc = Object.values(percentages).reduce(\n    (sum, p) => sum + (p || 0),\n    0\n  );\n\n  if (totalPerc === 0) {\n    return { W: 0, ЧП: 0, Kл: 0, ВДК: 0, m: 0 };\n  }\n\n  let mixW = 0,\n    mixЧП = 0,\n    mixKл = 0,\n    mixВДК = 0,\n    maxMass = Infinity;\n\n  selectedPits.forEach((pit) => {\n    const perc = percentages[pit.id] || 0;\n    if (perc > 0) {\n      const factor = perc / 100;\n\n      mixW += (parseFloat(pit.W) || 0) * factor;\n      mixЧП += (parseFloat(pit.ЧП) || 0) * factor;\n      mixKл += (parseFloat(pit.Kл) || 0) * factor;\n      mixВДК += (parseFloat(pit.ВДК) || 0) * factor;\n\n      const pitMass = parseFloat(pit.m) || 0;\n      if (pitMass > 0) {\n        const maxFromPit = pitMass / factor;\n        maxMass = Math.min(maxMass, maxFromPit);\n      }\n    }\n  });\n\n  return {\n    W: Math.round(mixW * 10) / 10,\n    ЧП: Math.round(mixЧП),\n    Kл: Math.round(mixKл * 10) / 10,\n    ВДК: Math.round(mixВДК),\n    m: maxMass === Infinity ? 0 : Math.round(maxMass * 10) / 10,\n  };\n};\n\n/**\n * Нормалізація відсотків до 100% з кратністю 10\n */\nexport const normalizePercentages = (percentages) => {\n  const total = Object.values(percentages).reduce(\n    (sum, p) => sum + (p || 0),\n    0\n  );\n\n  if (total === 0) return percentages;\n  if (total === 100) return percentages;\n\n  const normalized = {};\n\n  // Спочатку округлюємо кожне значення до кратного 10\n  Object.keys(percentages).forEach((id) => {\n    const value = ((percentages[id] || 0) / total) * 100;\n    normalized[id] = Math.round(value / 10) * 10;\n  });\n\n  // Корекція для точної суми 100%\n  const newTotal = Object.values(normalized).reduce(\n    (sum, p) => sum + (p || 0),\n    0\n  );\n  if (newTotal !== 100) {\n    const diff = 100 - newTotal;\n    const firstNonZeroKey = Object.keys(normalized).find(\n      (id) => normalized[id] > 0\n    );\n    if (firstNonZeroKey) {\n      normalized[firstNonZeroKey] += diff;\n      // Переконуємося що результат кратний 10\n      normalized[firstNonZeroKey] = Math.max(\n        0,\n        Math.round(normalized[firstNonZeroKey] / 10) * 10\n      );\n    }\n  }\n\n  return normalized;\n};\n\n/**\n * Розрахунок оптимального співвідношення для двох ям\n */\nexport const calculateOptimalRatio = (pit1, pit2, targetGluten) => {\n  const g1 = parseFloat(pit1.Kл);\n  const g2 = parseFloat(pit2.Kл);\n\n  if (g1 === g2) {\n    return { [pit1.id]: 50, [pit2.id]: 50 };\n  }\n\n  const p1 = ((targetGluten - g2) / (g1 - g2)) * 100;\n  const p2 = 100 - p1;\n\n  return {\n    [pit1.id]: Math.max(0, Math.min(100, Math.round(p1))),\n    [pit2.id]: Math.max(0, Math.min(100, Math.round(p2))),\n  };\n};\n\n/**\n * Перевірка валідності значень ями\n */\nexport const isValidPit = (pit) => {\n  return (\n    pit &&\n    pit.W !== null &&\n    pit.W !== undefined &&\n    pit.Kл !== null &&\n    pit.Kл !== undefined &&\n    pit.силос !== null &&\n    pit.силос !== undefined\n  );\n};\n\n/**\n * Отримання кольору ями на основі силосу та клейковини\n */\nexport const getPitColor = (pit) => {\n  if (!isValidPit(pit)) return \"var(--color-empty)\";\n\n  if (pit.силос === 1) return \"var(--color-silo-1)\";\n  if (pit.силос === 2) return \"var(--color-silo-2)\";\n  if (pit.силос === 3) {\n    return parseFloat(pit.Kл) > 23\n      ? \"var(--color-silo-3-high)\"\n      : \"var(--color-silo-3-low)\";\n  }\n\n  return \"var(--color-empty)\";\n};\n\n/**\n * Форматування значень для відображення\n */\nexport const formatValue = (value, unit = \"\") => {\n  if (value === null || value === undefined || value === \"\") return \"-\";\n  return `${value}${unit}`;\n};\n","// API конфігурація\nexport const API_CONFIG = {\n  URL: \"https://script.google.com/macros/s/AKfycbxAcsIMFSDcEPJuHQfMSedSavl_IgO5KO2JM_Vt9koY5Xt3MEul5F-RwUynXLKGUIaW/exec\",\n  TIMEOUT: 10000, // 10 секунд\n  RETRY_ATTEMPTS: 3,\n};\n\n// Кольори силосів\nexport const SILO_COLORS = {\n  1: \"#FBE393\",\n  2: \"#9CFB93\",\n  3: {\n    HIGH_GLUTEN: \"#9CFB93\", // > 23%\n    LOW_GLUTEN: \"#FBE393\", // ≤ 23%\n  },\n  EMPTY: \"#B0B0B0\",\n};\n\n// Налаштування за замовчуванням для нових ям\nexport const DEFAULT_PIT_VALUES = {\n  силос: 1,\n  W: 15.5,\n  ЧП: 350,\n  Kл: 22.0,\n  ВДК: 80,\n  m: 10.0,\n  дата: () => new Date().toLocaleDateString(\"uk-UA\"),\n};\n\n// Конфігурація ям\nexport const PIT_CONFIG = {\n  TOTAL_PITS: 6,\n  PITS_PER_ROW: 2,\n  GLUTEN_THRESHOLD: 23, // Поріг клейковини для 3 силосу\n  PERCENTAGE_STEP: 10, // Крок зміни відсотків\n  GLUTEN_STEP: 0.1, // Крок зміни клейковини\n};\n\n// ID ям\nexport const PIT_IDS = [\n  \"1\",\n  \"1a\",\n  \"2\",\n  \"2a\",\n  \"3\",\n  \"3a\",\n  \"4\",\n  \"4a\",\n  \"5\",\n  \"5a\",\n  \"6\",\n  \"6a\",\n];\n\n// Режими роботи додатка\nexport const APP_MODES = {\n  MAIN: \"main\",\n  CALCULATOR: \"calc\",\n  SELECT: \"select\",\n};\n\n// Валідаційні правила\nexport const VALIDATION_RULES = {\n  W: { min: 0, max: 30, step: 0.1 },\n  ЧП: { min: 200, max: 800, step: 1 },\n  Kл: { min: 10, max: 40, step: 0.1 },\n  ВДК: { min: 50, max: 150, step: 1 },\n  m: { min: 0, max: 1000, step: 0.1 },\n  силос: { values: [1, 2, 3] },\n};\n\n// Повідомлення про помилки\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: \"Помилка мережі. Перевірте підключення до інтернету.\",\n  API_ERROR: \"Помилка сервера. Спробуйте пізніше.\",\n  VALIDATION_ERROR: \"Некоректні дані. Перевірте введені значення.\",\n  SAVE_ERROR: \"Не вдалося зберегти дані. Спробуйте ще раз.\",\n  LOAD_ERROR:\n    \"Не вдалося завантажити дані. Використовуються значення за замовчуванням.\",\n  EMPTY_SELECTION: \"Виберіть принаймні одну яму для розрахунку.\",\n  INVALID_GLUTEN: \"Некоректне значення клейковини.\",\n};\n\n// Налаштування інтерфейсу\nexport const UI_CONFIG = {\n  ANIMATION_DURATION: 200,\n  DEBOUNCE_DELAY: 300,\n  MOBILE_BREAKPOINT: 480,\n  MODAL_Z_INDEX: 1000,\n};\n\n// Локалізація\nexport const LOCALE_CONFIG = {\n  LANGUAGE: \"uk-UA\",\n  DATE_FORMAT: \"DD.MM.YYYY\",\n  NUMBER_FORMAT: {\n    maximumFractionDigits: 1,\n    minimumFractionDigits: 0,\n  },\n};\n","import React, { useState, useEffect } from \"react\";\nimport PitCard from \"./components/PitCard/PitCard\";\nimport Calculator from \"./components/Calculator/Calculator\";\nimport SelectMode from \"./components/SelectMode/SelectMode\";\nimport { useApi } from \"./hooks/useApi\";\nimport { isValidPit } from \"./utils/calculations\";\nimport { PIT_IDS, APP_MODES, DEFAULT_PIT_VALUES } from \"./utils/constants\";\nimport \"./styles/variables.css\";\nimport \"./styles/globals.css\";\nimport styles from \"./styles/App.module.css\";\n\nconst App = () => {\n  const [pits, setPits] = useState([]);\n  const [selectedPits, setSelectedPits] = useState([]);\n  const [mode, setMode] = useState(APP_MODES.MAIN);\n  const { loading, error, loadData, saveData } = useApi();\n\n  useEffect(() => {\n    initializeApp();\n  }, []);\n\n  const initializeApp = async () => {\n    const data = await loadData();\n\n    // Завжди створюємо всі 6 ям\n    const allPits = PIT_IDS.map((id) => ({\n      id,\n      силос: null,\n      W: null,\n      ЧП: null,\n      Kл: null,\n      ВДК: null,\n      m: null,\n      дата: DEFAULT_PIT_VALUES.дата(),\n    }));\n\n    // Якщо є дані з бекенду, оновлюємо відповідні ями\n    if (data && data.pits && Array.isArray(data.pits)) {\n      data.pits.forEach((backendPit) => {\n        const index = allPits.findIndex((pit) => pit.id === backendPit.id);\n        if (index !== -1) {\n          allPits[index] = { ...allPits[index], ...backendPit };\n        }\n      });\n    }\n\n    setPits(allPits);\n  };\n\n  const handleSaveData = async (newPits) => {\n    try {\n      // Фільтруємо тільки заповнені ями для збереження на бекенді\n      const filledPits = newPits.filter((pit) => isValidPit(pit));\n\n      await saveData({ pits: filledPits });\n\n      // Але локально зберігаємо всі ями (включно з порожніми)\n      setPits(newPits);\n    } catch (err) {\n      console.error(\"Помилка збереження:\", err);\n      // Показати помилку користувачу (можна додати toast notifications)\n    }\n  };\n\n  const handlePitSelect = (pit) => {\n    if (!isValidPit(pit)) return;\n\n    setSelectedPits((prev) => {\n      const isSelected = prev.some((p) => p.id === pit.id);\n      let newSelection;\n\n      if (isSelected) {\n        newSelection = prev.filter((p) => p.id !== pit.id);\n      } else {\n        newSelection = [...prev, pit];\n      }\n\n      // Автоматично переходимо в режим калькулятора при виборі ям\n      // але ями залишаються видимими\n      if (newSelection.length > 0) {\n        setMode(APP_MODES.CALCULATOR);\n      } else {\n        setMode(APP_MODES.MAIN);\n      }\n\n      return newSelection;\n    });\n  };\n\n  const startCalculation = () => {\n    // Функція видалена - автоматичний перехід при виборі ям\n  };\n\n  const handleBackToMain = () => {\n    setMode(APP_MODES.MAIN);\n    setSelectedPits([]); // Очищаємо вибір при поверненні\n  };\n\n  const openSelectMode = () => {\n    setMode(APP_MODES.SELECT);\n  };\n\n  if (loading && pits.length === 0) {\n    return (\n      <div className={styles.loading}>\n        <div className=\"loading-spinner\"></div>\n        <span>Завантаження...</span>\n      </div>\n    );\n  }\n\n  if (mode === APP_MODES.CALCULATOR) {\n    return (\n      <Calculator\n        selectedPits={selectedPits}\n        allPits={pits}\n        onPitSelect={handlePitSelect}\n        onBack={handleBackToMain}\n      />\n    );\n  }\n\n  if (mode === APP_MODES.SELECT) {\n    return (\n      <SelectMode\n        pits={pits}\n        onBack={handleBackToMain}\n        onSave={handleSaveData}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.header}>\n        <h1>LAB Calc</h1>\n        <button\n          onClick={openSelectMode}\n          className={styles.editBtn}\n          aria-label=\"Редагувати ями\"\n        >\n          ✏️\n        </button>\n      </div>\n\n      {error && <div className={styles.errorMessage}>{error}</div>}\n\n      <div className={styles.pitsGrid}>\n        {pits.map((pit) => (\n          <PitCard\n            key={pit.id}\n            pit={pit}\n            isSelected={selectedPits.some((p) => p.id === pit.id)}\n            onSelect={handlePitSelect}\n            mode=\"view\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\n// Перевірка підтримки браузера\nif (!window.fetch) {\n  console.error(\"Ваш браузер не підтримує fetch API. Оновіть браузер.\");\n}\n\n// Обробка помилок\nwindow.addEventListener(\"error\", (event) => {\n  console.error(\"Глобальна помилка:\", event.error);\n});\n\nwindow.addEventListener(\"unhandledrejection\", (event) => {\n  console.error(\"Необроблений промис:\", event.reason);\n});\n\n// Service Worker (опціонально)\nif (\"serviceWorker\" in navigator && process.env.NODE_ENV === \"production\") {\n  window.addEventListener(\"load\", () => {\n    navigator.serviceWorker\n      .register(\"/sw.js\")\n      .then((registration) => {\n        console.log(\"SW registered: \", registration);\n      })\n      .catch((registrationError) => {\n        console.log(\"SW registration failed: \", registrationError);\n      });\n  });\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","PitCard","pit","isSelected","onSelect","onEdit","mode","getPitColor","formatValue","value","unit","handleClick","handleCheckboxChange","jsxs","styles","jsx","Calculator","selectedPits","onBack","allPits","onPitSelect","targetGluten","setTargetGluten","useState","percentages","setPercentages","mixData","setMixData","isAutoMode","setIsAutoMode","savedTargetGluten","setSavedTargetGluten","componentFilter","setComponentFilter","showTopResults","setShowTopResults","topResults","setTopResults","useEffect","savedGluten","initializeAutoMode","initializeManualMode","glutenValues","v","minGluten","maxGluten","targetValue","results","optimizeForTargetGluten","calculateMixFromPercentages","initialPercentages","equalShare","remaining","index","share","updateTargetFromPercentages","pits","TARGET_FALLING_NUMBER","pit1","pit2","g1","g2","p1","p2","bestCombinations","bestGlutenError","getComponentCount","passesComponentFilter","componentCount","generateAllCombinations","pitIndex","currentPercentages","remainingPerc","nonZeroCount","mixW","mixЧП","mixGluten","mixВДК","mixM","totalWeight","perc","weight","maxFromPit","glutenError","fallingNumberError","mixDataObj","currentPit","startTime","endTime","acc","top5","combo","bestCombo","percs","sum","mixKл","maxMass","factor","totalPerc","calculatedGluten","adjustGluten","delta","newTarget","roundedTarget","adjustPercentageManual","pitId","newPercentages","newPerc","toggleMode","canDecreaseGluten","canIncreaseGluten","canDecreasePit","canIncreasePit","getTotalPercentage","isOverLimit","getGlutenError","isGlutenErrorHigh","Fragment","result","_","EditModal","isOpen","onClose","onSave","formData","setFormData","handleInputChange","field","prev","handleSave","updatedPit","handleClear","clearedPit","SelectMode","editingPit","setEditingPit","localPits","setLocalPits","handleSavePit","newPits","handleEditPit","handleCloseModal","API_URL","useApi","loading","setLoading","error","setError","loadData","useCallback","response","data","err","saveData","payload","params","loadDataJSONP","resolve","reject","callbackName","script","isValidPit","DEFAULT_PIT_VALUES","PIT_IDS","APP_MODES","App","setPits","setSelectedPits","setMode","initializeApp","id","backendPit","handleSaveData","filledPits","handlePitSelect","newSelection","handleBackToMain","openSelectMode","event","registration","registrationError","root","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}